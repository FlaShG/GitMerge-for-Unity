<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" xml:lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    
    <base href="./" />
    <title>GitMerge for Unity</title>
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="additional.css">
    <meta name="description" content="Use Git with Unity. Merge your Scenes and Prefabs with GitMerge for Unity." />
    <meta name="keywords" content="GitMerge for Unity, Unity, Git, Merge, Scene, Prefab" />
    
</head>
<body>

    <nav class="navbar navbar-inverse navbar-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="./"><img src="GitMergeLogo.png" /></a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li><a href="#about">About</a></li>
            <li><a href="#install">Install</a></li>
            <li><a href="#howto">How to use</a></li>
            <li><a href="#development">Active Development</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">
    <h1>Using Unity with Git, made painless for everyone.</h1>
    <p class="lead">
        <i>GitMerge for Unity</i> is a free, open source Unity Editor tool that allows you
        to merge scene and prefab files. This solves the main problem you currently get when using
        Git to work with Unity.
    </p>
    
    <h2 id="about">About</h2>
        <p>
            Unity offers a few solutions for collaborative teamwork. These do not necessarily stick to
            the standard you're used to. So... <b>why not use Git?</b>
        </p>
        <p>
            You'll have to take these two things into account in order to get started:
            <ol>
                <li>
                    Setup a good .gitignore, like
                    <a href="https://github.com/github/gitignore/blob/master/Unity.gitignore" target="_blank">
                        this one</a>.
                </li>
                
                <li>
                    Get yourself a mergetool for scenes and prefabs.<br />
                    That's where <i>GitMerge for Unity</i> is supposed to come in.
                </li>
            </ol>
        </p>
        <p>
            <i>GitMerge for Unity</i> is licensed under the <a href="http://choosealicense.com/licenses/gpl-2.0/" target="_blank">GPL2.0 license</a>.
        </p>
    
    <h2 id="install">How to install</h2>
    <p>
        To use <i>GitMerge for Unity</i>, go to the
        <a href="https://github.com/FlaShG/GitMerge-for-Unity">project page</a>
        and clone the repository into your Assets Folder.
    </p>
    <p>
        Next, you make sure that Git doesn't try to merge scenes and prefabs automatically,
        since this usually leads to broken files with Unity scenes and prefabs.
    </p>
    <p>
        You have two ways to do that. The first one is to make sure that
        "<a href="http://docs.unity3d.com/Manual/class-EditorManager.html" target="_blank">Asset Serialization</a>"
        is set to "Mixed" or "Binary". Unity will save scenes and prefabs as binary files and Git won't touch them.
    </p>
    <p>
        If you want your files serialized as YAML files, you can alternatively add a .gitattributes file
        that tells Git to handle said filetypes as binary files, even though you want Unity so save them as YAML files.<br />
        That .gitattributes file could look like this:
        <pre># .gitattributes

*.unity binary
*.prefab binary
*.asset binary

# etc.</pre>
    </p>
    <p>
        That's it, you're ready to go!
    </p>
    
    <div class="col-sm-4 pull-right">
        <div class="panel panel-info">
            <div class="panel-heading"><h4>How to...</h4></div>
            <ol>
                <li><a href="#instructions-start">Start merging</a></li>
                <li><a href="#instructions-scene">Merge a scene</a></li>
                <li><a href="#instructions-prefab">Merga a prefab</a></li>
            </ol>
        </div>
    </div>
    <h2 id="howto">How to use</h2>
    <div class="alert alert-info col-sm-8">
        <i>GitMerge for Unity</i> is an open source software and is constantly being developed.
        If you find something that could be improved, please feel free to help!
    </div>
    <h3 id="instructions-start" class="clear">Start merging</h3>
    <p>
        <i>GitMerge for Unity</i> comes as an opt-in merge tool.
        It is not integrated into Git as an automatic merge tool since merging scenes and prefabs
        is something you'd never want to have done automatically.
    </p>
    <p>
        First off, you create your merge conflict the way you usually do.
        Once you're in Git's MERGING state, open the GitMerge window in Unity (Window &rarr; GitMerge).
    </p>
    
    <div class="pull-right with-margin panel panel-default small-text" style="width:530px">
        <div class="panel-body">
            <img src="SceneMergeScreen.jpg" />
            <p>
                This is what a scene merge situation can look like.
            </p>
            <p class="last">
                The BoxCollider component of the "Cube" GameObject has been automatically merged to the default setting ("keep it").<br />
                The user has decided to use "their" version of Transform.LocalPosition, but "our" version of Rigidbody.Interpolate and BoxCollider.IsTrigger.<br />
                The other two conflicts have not been addressed yet.
            </p>
       </div>
    </div>
    <h3 id="instructions-scene">Merge a scene</h3>
    <p>
        To merge a scene, open it the usual way. Then, in the GitMerge Window, click "Start merging this scene".
        When there is an active merge conflict, the tool will find the differences between the currently opened
        version of the scene and "their" version.
    </p>
    <p>
        You will then get a list of so called "MergeActions" in the tool window.
        Each MergeAction solves one point of conflict between the two scenes.<br />
        To do this, you will be offered two to three options every time:
        <ul>
            <li><b>Use "ours"</b> (left side)</li>
            <li><b>Use "theirs"</b> (right side)</li>
            <li><b>Use new</b> (center, when applicable)</li>
        </ul>
        You can choose to click the left button to use our version, the right button for their version,
        or enter a new value in the middle. Either way, the MergeAction line will turn from red (unmerged)
        to green (merged).
        MergeActions that have been automatically merged to a default
        (like keeping a Component that "their" version doesn't have) are marked yellow.
    </p>
    <p>
        You can, of course, continue to edit the scene in a normal way during merging.
        It is not recommended to delete GameObjects that might be part of a MergeAction though.
    </p>
    <p>
        When all MergeActions are flagged as merged, you can click on "Apply merge".<br />
        The scene will be saved and marked as merged for git. Since there could be more merge conflicts,
        this will not automatically commit.<br />
        You'll have to commit your merge manually at some point from now on.
    </p>
    
    <h3 id="instructions-prefab">Merge a prefab</h3>
    <p>
        Merging a prefab pretty much works like with a scene.
    </p>
    <p>
        While in a merge conflict, open the "Merge Prefab" tab and drag your prefab into the field.<br />
        A new scene will be opened. This scene contains an instance of said prefab.
        You'll get the same type of list you already know from scene merging.
        Merge your conflicts and see the result on the prefab instance.
    </p>
    <p>
        When you hit "Apply merge" when done, you will be returned to the scene you were in before. The prefab file will be added to the Git stage, but remember that you'll have to commmit the merge yourself.
    </p>
    
    
    <h2 id="development">Active development</h2>
    <p>
        <i>GitMerge for Unity</i> is an open source tool that is being actively developed.
        You can head over to the <a href="https://github.com/FlaShG/GitMerge-for-Unity">project page</a>,
        check out issues, fork, and make pull requests.<br />
        If you find a bug or something to improve, but cannot fix/implement it yourself, feel free to tell me about it.
    </p>
    <p>
        To see what's up next, have a look at the project's
        <a href="https://github.com/FlaShG/GitMerge-for-Unity/issues">issue page</a>.
    </p>
    
    </div><!-- /.container -->
    
    <div class="footer">
        <div class="container">
            GitMerge for Unity 
        </div>
    </div>

    <!-- Bootstrap core JavaScript
    ==================================================
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
</body>
</html>
